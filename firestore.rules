rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny rule for security
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Allow read if user is the organizer or a contributor
      allow read: if request.auth != null && 
                   (resource.data.organizerId == request.auth.uid || 
                    resource.data.contributorIds.hasAny([request.auth.uid]));
      
      // Allow creation if authenticated
      allow create: if request.auth != null;
      
      // Allow update if user is organizer
      allow update: if request.auth != null && 
                     resource.data.organizerId == request.auth.uid;
      
      // Allow delete if user is organizer
      allow delete: if request.auth != null && 
                     resource.data.organizerId == request.auth.uid;
      
      // Video clips subcollection - allow invited users to add clips
      match /clips/{clipId} {
        allow read: if request.auth != null &&
                     (get(/databases/$(database)/documents/projects/$(projectId)).data.contributorIds.hasAny([request.auth.uid]) ||
                      get(/databases/$(database)/documents/projects/$(projectId)).data.organizerId == request.auth.uid);
                      
        allow create: if request.auth != null && 
                      request.resource.data.contributorId == request.auth.uid &&
                      get(/databases/$(database)/documents/projects/$(projectId)).data.contributorIds.hasAny([request.auth.uid]);
                      
        allow delete: if request.auth != null &&
                      (get(/databases/$(database)/documents/projects/$(projectId)).data.organizerId == request.auth.uid ||
                       resource.data.contributorId == request.auth.uid);
      }
      
      // Invitations subcollection - for tracking who's been invited to the project
      match /invitations/{invitationId} {
        // Allow read for both organizers and contributors
        // Organizers need to manage invitations, contributors need to see who else is invited
        allow read: if request.auth != null && 
                    (
                      // User is the project organizer
                      get(/databases/$(database)/documents/projects/$(projectId)).data.organizerId == request.auth.uid ||
                      // User is a contributor to the project
                      get(/databases/$(database)/documents/projects/$(projectId)).data.contributorIds.hasAny([request.auth.uid])
                    );
        
        // Allow organizer to create/update/delete invitations
        allow write: if request.auth != null &&
                     get(/databases/$(database)/documents/projects/$(projectId)).data.organizerId == request.auth.uid;
      }
    }
  }
} 